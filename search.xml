<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[MyBatis-Plus的配置及使用]]></title>
      <url>/2020/12/17/MyBatis-Plus%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="一、MyBatis-Plus"><a href="#一、MyBatis-Plus" class="headerlink" title="一、MyBatis-Plus"></a>一、MyBatis-Plus</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>MyBatis-Plus 是一个 Mybatis 增强版工具，在 MyBatis 上扩充了其他功能没有改变其基本功能，为了简化开发提交效率而存在。</p>
<p>官网文档地址：&lt;　<a href="https://mp.baomidou.com/guide/&gt;">https://mp.baomidou.com/guide/&gt;</a></p>
<p>MyBatis-Plus 特性：<a href="https://mp.baomidou.com/guide/#%E7%89%B9%E6%80%A7">https://mp.baomidou.com/guide/#%E7%89%B9%E6%80%A7</a></p>
<h2 id="2、使用-SpringBoot-快速使用-MyBatis-Plus"><a href="#2、使用-SpringBoot-快速使用-MyBatis-Plus" class="headerlink" title="2、使用 SpringBoot 快速使用 MyBatis-Plus"></a>2、使用 SpringBoot 快速使用 MyBatis-Plus</h2><h4 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><p>​        需要 Java 开发环境（JDK）以及相应的开发工具（IDE）。<br>　　需要 maven（用来下载相关依赖的 jar 包）。<br>　　需要 SpringBoot。<br>　　可以使用 IDEA 安装一个 mybatis-plus 插件。</p>
<p><img src="/img%5Cmybatis-plus1.png" alt="mybatis-plus1"></p>
<h4 id="2-创建一个SpringBoot项目"><a href="#2-创建一个SpringBoot项目" class="headerlink" title="(2)创建一个SpringBoot项目"></a>(2)创建一个SpringBoot项目</h4><p>​        方式一：去官网&lt; <a href="https://start.spring.io/">https://start.spring.io/</a> &gt;初始化一个，然后导入IDE工具即可。</p>
<p>​        方式二：直接使用IDE工具创建一个Spring Initializer。</p>
<p><img src="/img%5Cmybatis-plus2.png" alt="mybatis-plus2"></p>
<p><img src="/img%5Cmybatis-plus3.png" alt="mybatis-plus3"></p>
<h4 id="3-添加-MyBatis-Plus-依赖（mybatis-plus-boot-starter）"><a href="#3-添加-MyBatis-Plus-依赖（mybatis-plus-boot-starter）" class="headerlink" title="(3)添加 MyBatis-Plus 依赖（mybatis-plus-boot-starter）"></a>(3)添加 MyBatis-Plus 依赖（mybatis-plus-boot-starter）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-为了测试开发，此处使用-mysql-8，需要引入-mysql-相关依赖。"><a href="#4-为了测试开发，此处使用-mysql-8，需要引入-mysql-相关依赖。" class="headerlink" title="(4)为了测试开发，此处使用 mysql 8，需要引入 mysql 相关依赖。"></a>(4)为了测试开发，此处使用 mysql 8，需要引入 mysql 相关依赖。</h4><p>​        <font color="red">为了简化代码，引入 lombok 依赖（减少 getter、setter 等方法）。</font></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-完整依赖文件（pom-xml）"><a href="#5-完整依赖文件（pom-xml）" class="headerlink" title="(5)完整依赖文件（pom.xml）"></a>(5)完整依赖文件（pom.xml）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lyh.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>test-mybatis-plus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>测试 -- 测试 MyBatis-Plus 功能<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-使用一个表测试"><a href="#6-使用一个表测试" class="headerlink" title="(6)使用一个表测试"></a>(6)使用一个表测试</h4><p>​    <font color="red">仅供参考，可以定义 创建时间、修改时间等字段。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> testMyBatisPlus;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> testMyBatisPlus;</span><br><span class="line"><span class="keyword">USE</span> testMyBatisPlus;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus4.png" alt="mybatis-plus4"></p>
<h4 id="7-在-application-yml-文件中配置-mysql-数据源信息。"><a href="#7-在-application-yml-文件中配置-mysql-数据源信息。" class="headerlink" title="(7)在 application.yml 文件中配置 mysql 数据源信息。"></a>(7)在 application.yml 文件中配置 mysql 数据源信息。</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/testMyBatisPlus?useUnicode=true&amp;characterEncoding=utf8</span></span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus5.png" alt="img\mybatis-plus5"></p>
<h4 id="8-编写表对应的-实体类。"><a href="#8-编写表对应的-实体类。" class="headerlink" title="(8)编写表对应的 实体类。"></a>(8)编写表对应的 实体类。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus6.png" alt="mybatis-plus6"></p>
<h4 id="9-编写操作实体类的-Mapper-类。"><a href="#9-编写操作实体类的-Mapper-类。" class="headerlink" title="(9)编写操作实体类的 Mapper 类。"></a>(9)编写操作实体类的 Mapper 类。</h4><p><font color="red">直接继承 BaseMapper，这是 mybatis-plus 封装好的类。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus7.png" alt="mybatis-plus7"></p>
<p><img src="/img%5Cmybatis-plus8.png" alt="mybatis-plus8"></p>
<h4 id="10-实体类、Mapper-类都写好了，就可以使用了。"><a href="#10-实体类、Mapper-类都写好了，就可以使用了。" class="headerlink" title="(10)实体类、Mapper 类都写好了，就可以使用了。"></a>(10)实体类、Mapper 类都写好了，就可以使用了。</h4><h6 id="Step1：先得在启动类里扫描-Mapper-类，即添加-MapperScan-注解"><a href="#Step1：先得在启动类里扫描-Mapper-类，即添加-MapperScan-注解" class="headerlink" title="Step1：先得在启动类里扫描 Mapper 类，即添加 @MapperScan 注解"></a>Step1：先得在启动类里扫描 Mapper 类，即添加 @MapperScan 注解</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyh.test.testmybatisplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatisPlusApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestMybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Step2：写一个测试类测试一下。"><a href="#Step2：写一个测试类测试一下。" class="headerlink" title="Step2：写一个测试类测试一下。"></a>Step2：写一个测试类测试一下。</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyh.test.testmybatisplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span>(User user:userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus9.png" alt="mybatis-plus9"></p>
<h4 id="11-总结：通过以上简单操作，就能对-user-表进行-CRUD-操作，不需要去编写-xml-文件。"><a href="#11-总结：通过以上简单操作，就能对-user-表进行-CRUD-操作，不需要去编写-xml-文件。" class="headerlink" title="(11) 总结：通过以上简单操作，就能对 user 表进行 CRUD 操作，不需要去编写 xml 文件。"></a>(11) 总结：通过以上简单操作，就能对 user 表进行 CRUD 操作，不需要去编写 xml 文件。</h4><p>​           注：<font color="red">若遇到 @Autowired 标记的变量出现 红色下划线，但是不影响 正常运行。</font></p>
<p><img src="/img%5Cmybatis-plus10.png" alt="mybatis-plus10"></p>
<p>可以进入 Settings，找到 Inspection，并选择其中的 Spring Core -&gt; Code -&gt; Autowiring for Bean Class,将 Error 改为 Warning，即可。</p>
<p><img src="/img%5Cmybatis-plus11.png" alt="mybatis-plus11"></p>
<h1 id="二、Mybatis-Plus-常用操作"><a href="#二、Mybatis-Plus-常用操作" class="headerlink" title="二、Mybatis-Plus 常用操作"></a>二、Mybatis-Plus 常用操作</h1><h2 id="1、配置日志"><a href="#1、配置日志" class="headerlink" title="1、配置日志"></a>1、配置日志</h2><p>【参考地址（两种方式配置日志）】</p>
<p><a href="https://blog.csdn.net/dfBeautifulLive/article/details/100700365">https://blog.csdn.net/dfBeautifulLive/article/details/100700365</a></p>
<p>想要查看执行的 sql 语句，可以在 yml 文件中添加配置信息，如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<p>如下图所示：执行时会打印出 sql 语句:</p>
<p><img src="/img/mybatis-plus12.png" alt="mybatis-plus12"></p>
<h2 id="2、简单认识一下常用注解"><a href="#2、简单认识一下常用注解" class="headerlink" title="2、简单认识一下常用注解"></a>2、简单认识一下常用注解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【@TableName 】</span><br><span class="line">    @TableName               用于定义表名</span><br><span class="line">注：</span><br><span class="line">    常用属性：</span><br><span class="line">        value                用于定义表名</span><br><span class="line"></span><br><span class="line">【@TableId】</span><br><span class="line">    @TableId                 用于定义表的主键</span><br><span class="line">注：</span><br><span class="line">    常用属性：</span><br><span class="line">        value           用于定义主键字段名</span><br><span class="line">        type            用于定义主键类型（主键策略 IdType）</span><br><span class="line"></span><br><span class="line">   主键策略：</span><br><span class="line">      IdType.AUTO          主键自增，系统分配，不需要手动输入</span><br><span class="line">      IdType.NONE          未设置主键</span><br><span class="line">      IdType.INPUT         需要自己输入 主键值。</span><br><span class="line">      IdType.ASSIGN_ID     系统分配 ID，用于数值型数据（Long，对应 mysql 中 BIGINT 类型）。</span><br><span class="line">      IdType.ASSIGN_UUID   系统分配 UUID，用于字符串型数据（String，对应 mysql 中 varchar(32) 类型）。</span><br><span class="line"></span><br><span class="line">【@TableField】  </span><br><span class="line">    @TableField            用于定义表的非主键字段。</span><br><span class="line">注：</span><br><span class="line">    常用属性：</span><br><span class="line">        value                用于定义非主键字段名</span><br><span class="line">        exist                用于指明是否为数据表的字段， true 表示是，false 为不是。</span><br><span class="line">        fill                 用于指定字段填充策略（FieldFill）。</span><br><span class="line">        </span><br><span class="line">    字段填充策略：（一般用于填充 创建时间、修改时间等字段）</span><br><span class="line">        FieldFill.DEFAULT         默认不填充</span><br><span class="line">        FieldFill.INSERT          插入时填充</span><br><span class="line">        FieldFill.UPDATE          更新时填充</span><br><span class="line">        FieldFill.INSERT_UPDATE   插入、更新时填充。</span><br><span class="line"></span><br><span class="line">【@TableLogic】</span><br><span class="line">    @TableLogic           用于定义表的字段进行逻辑删除（非物理删除）</span><br><span class="line">注：</span><br><span class="line">    常用属性：</span><br><span class="line">        value            用于定义未删除时字段的值</span><br><span class="line">        delval           用于定义删除时字段的值</span><br><span class="line">        </span><br><span class="line">【@Version】</span><br><span class="line">    @Version             用于字段实现乐观锁</span><br></pre></td></tr></table></figure>

<h2 id="3、代码生成器"><a href="#3、代码生成器" class="headerlink" title="3、代码生成器"></a>3、代码生成器</h2><h4 id="（1）AutoGenerator-简介"><a href="#（1）AutoGenerator-简介" class="headerlink" title="（1）AutoGenerator 简介"></a>（1）AutoGenerator 简介</h4><p>　　AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
<p>​       与 mybatis 中的 mybatis-generator-core 类似。</p>
<h4 id="（2）添加依赖"><a href="#（2）添加依赖" class="headerlink" title="（2）添加依赖"></a>（2）添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加 模板引擎 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-代码分析"><a href="#3-代码分析" class="headerlink" title="(3) 代码分析"></a>(3) 代码分析</h4><p>Step1：<br>　　创建一个 代码生成器。用于生成代码。<br>　　<font color="red">此处不用修改。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step1：代码生成器</span></span><br><span class="line">AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br></pre></td></tr></table></figure>

<p>Step2：<br>　　配置全局信息。指定代码输出路径，以及包名、作者等信息。<br>　　<font color="red">此处按需添加，projectPath 需要修改，setAuthor 需要修改。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step2：全局配置</span></span><br><span class="line">GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line"><span class="comment">// 填写代码生成的目录(需要修改)</span></span><br><span class="line">String projectPath = <span class="string">&quot;E:\\myProject\\test\\test_mybatis_plus&quot;</span>;</span><br><span class="line"><span class="comment">// 拼接出代码最终输出的目录</span></span><br><span class="line">gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line"><span class="comment">// 配置开发者信息（可选）（需要修改）</span></span><br><span class="line">gc.setAuthor(<span class="string">&quot;lyh&quot;</span>);</span><br><span class="line"><span class="comment">// 配置是否打开目录，false 为不打开（可选）</span></span><br><span class="line">gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 实体属性 Swagger2 注解，添加 Swagger 依赖，开启 Swagger2 模式（可选）</span></span><br><span class="line"><span class="comment">//gc.setSwagger2(true);</span></span><br><span class="line"><span class="comment">// 重新生成文件时是否覆盖，false 表示不覆盖（可选）</span></span><br><span class="line">gc.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 配置主键生成策略，此处为 ASSIGN_ID（可选）</span></span><br><span class="line">gc.setIdType(IdType.ASSIGN_ID);</span><br><span class="line"><span class="comment">// 配置日期类型，此处为 ONLY_DATE（可选）</span></span><br><span class="line">gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line"><span class="comment">// 默认生成的 service 会有 I 前缀</span></span><br><span class="line">gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">mpg.setGlobalConfig(gc);</span><br></pre></td></tr></table></figure>

<p>Step3：<br>　　配置数据源信息。用于指定 需要生成代码的 数据仓库、数据表。<br>　　<font color="red">setUrl、setDriverName、setUsername、setPassword 均需修改。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step3：数据源配置（需要修改）</span></span><br><span class="line">DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line"><span class="comment">// 配置数据库 url 地址</span></span><br><span class="line">dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/testMyBatisPlus?useUnicode=true&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line"><span class="comment">// dsc.setSchemaName(&quot;testMyBatisPlus&quot;); // 可以直接在 url 中指定数据库名</span></span><br><span class="line"><span class="comment">// 配置数据库驱动</span></span><br><span class="line">dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">// 配置数据库连接用户名</span></span><br><span class="line">dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">// 配置数据库连接密码</span></span><br><span class="line">dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">mpg.setDataSource(dsc);</span><br></pre></td></tr></table></figure>

<p>Step4：<br>　　配置包信息。<br>　　<font color="red">setParent、setModuleName 均需修改。其余按需求修改.</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step:4：包配置</span></span><br><span class="line">PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line"><span class="comment">// 配置父包名（需要修改）</span></span><br><span class="line">pc.setParent(<span class="string">&quot;com.lyh.test&quot;</span>);</span><br><span class="line"><span class="comment">// 配置模块名（需要修改）</span></span><br><span class="line">pc.setModuleName(<span class="string">&quot;test_mybatis_plus&quot;</span>);</span><br><span class="line"><span class="comment">// 配置 entity 包名</span></span><br><span class="line">pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line"><span class="comment">// 配置 mapper 包名</span></span><br><span class="line">pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line"><span class="comment">// 配置 service 包名</span></span><br><span class="line">pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line"><span class="comment">// 配置 controller 包名</span></span><br><span class="line">pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">mpg.setPackageInfo(pc);</span><br></pre></td></tr></table></figure>

<p>Step5：<br>　　配置数据表映射信息。<br>　　<font color="red">setInclude 需要修改，其余按实际开发修改。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step5：策略配置（数据库表配置）</span></span><br><span class="line">StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line"><span class="comment">// 指定表名（可以同时操作多个表，使用 , 隔开）（需要修改）</span></span><br><span class="line">strategy.setInclude(<span class="string">&quot;test_mybatis_plus_user&quot;</span>);</span><br><span class="line"><span class="comment">// 配置数据表与实体类名之间映射的策略</span></span><br><span class="line">strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">// 配置数据表的字段与实体类的属性名之间映射的策略</span></span><br><span class="line">strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">// 配置 lombok 模式</span></span><br><span class="line">strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 配置 rest 风格的控制器（@RestController）</span></span><br><span class="line">strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 配置驼峰转连字符</span></span><br><span class="line">strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 配置表前缀，生成实体时去除表前缀</span></span><br><span class="line"><span class="comment">// 此处的表名为 test_mybatis_plus_user，模块名为 test_mybatis_plus，去除前缀后剩下为 user。</span></span><br><span class="line">strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">mpg.setStrategy(strategy);</span><br></pre></td></tr></table></figure>

<p>Step6：<br>　　执行代码生成操作。</p>
<p>​        <font color="red">此处不用修改。</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step6：执行代码生成操作</span></span><br><span class="line">mpg.execute();</span><br></pre></td></tr></table></figure>

<h4 id="完整配置如下："><a href="#完整配置如下：" class="headerlink" title="完整配置如下："></a>完整配置如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyh.test.test_mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAutoGenerate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoGenerate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Step1：代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step2：全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">// 填写代码生成的目录(需要修改)</span></span><br><span class="line">        String projectPath = <span class="string">&quot;E:\\myProject\\test\\test_mybatis_plus&quot;</span>;</span><br><span class="line">        <span class="comment">// 拼接出代码最终输出的目录</span></span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置开发者信息（可选）（需要修改）</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;lyh&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置是否打开目录，false 为不打开（可选）</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 实体属性 Swagger2 注解，添加 Swagger 依赖，开启 Swagger2 模式（可选）</span></span><br><span class="line">        <span class="comment">//gc.setSwagger2(true);</span></span><br><span class="line">        <span class="comment">// 重新生成文件时是否覆盖，false 表示不覆盖（可选）</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 配置主键生成策略，此处为 ASSIGN_ID（可选）</span></span><br><span class="line">        gc.setIdType(IdType.ASSIGN_ID);</span><br><span class="line">        <span class="comment">// 配置日期类型，此处为 ONLY_DATE（可选）</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        <span class="comment">// 默认生成的 service 会有 I 前缀</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step3：数据源配置（需要修改）</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        <span class="comment">// 配置数据库 url 地址</span></span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/testMyBatisPlus?useUnicode=true&amp;characterEncoding=utf8&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;testMyBatisPlus&quot;); // 可以直接在 url 中指定数据库名</span></span><br><span class="line">        <span class="comment">// 配置数据库驱动</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置数据库连接用户名</span></span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置数据库连接密码</span></span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step:4：包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        <span class="comment">// 配置父包名（需要修改）</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com.lyh.test&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置模块名（需要修改）</span></span><br><span class="line">        pc.setModuleName(<span class="string">&quot;test_mybatis_plus&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置 entity 包名</span></span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置 mapper 包名</span></span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置 service 包名</span></span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置 controller 包名</span></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step5：策略配置（数据库表配置）</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// 指定表名（可以同时操作多个表，使用 , 隔开）（需要修改）</span></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;test_mybatis_plus_user&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置数据表与实体类名之间映射的策略</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// 配置数据表的字段与实体类的属性名之间映射的策略</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// 配置 lombok 模式</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 配置 rest 风格的控制器（@RestController）</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 配置驼峰转连字符</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 配置表前缀，生成实体时去除表前缀</span></span><br><span class="line">        <span class="comment">// 此处的表名为 test_mybatis_plus_user，模块名为 test_mybatis_plus，去除前缀后剩下为 user。</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step6：执行代码生成操作</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus13.png" alt="mybatis-plus13"></p>
<h3 id="4、自动填充数据功能"><a href="#4、自动填充数据功能" class="headerlink" title="4、自动填充数据功能"></a>4、自动填充数据功能</h3><p>(1）简介<br>　　添加、修改数据时，每次都会使用相同的方式进行填充。比如 数据的创建时间、修改时间等。<br>　　Mybatis-plus 支持自动填充这些字段的数据。</p>
<p>　　给之前的数据表新增两个字段：创建时间、修改时间。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_mybatis_plus_user</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    create_time <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;最后修改时间&#x27;</span>, </span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>并使用 代码生成器生成代码。</p>
<p><img src="/img%5Cmybatis-plus14.png" alt="mybatis-plus14"></p>
<p>（2）未使用自动填充时<br>　　未使用 自动填充时，每次添加、修改数据都可以手动对其进行添加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;tom&quot;</span>).setAge(<span class="number">20</span>).setEmail(<span class="string">&quot;tom@163.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 手动添加数据</span></span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> Date()).setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">if</span> (userService.save(user)) &#123;</span><br><span class="line">            userService.list().forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加数据失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus15.png" alt="mybatis-plus15"></p>
<p>（3）使用自动填充功能。<br>        Step1：<br>　　            使用 @TableField 注解，标注需要进行填充的字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最后修改时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus16.png" alt="img\mybatis-plus16"></p>
<p>​    Step2：<br>　　        自定义一个类，实现 MetaObjectHandler 接口，并重写方法。<br>　        　添加 @Component 注解，交给 Spring 去管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyh.test.test_mybatis_plus.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, Date.class, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, Date.class, <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, Date.class, <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus17.png" alt="mybatis-plus17"></p>
<p>​    Step3：<br>　　        简单测试一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutoFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;tom&quot;</span>).setAge(<span class="number">20</span>).setEmail(<span class="string">&quot;tom@163.com&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (userService.save(user)) &#123;</span><br><span class="line">        userService.list().forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加数据失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus18.png" alt="mybatis-plus18"></p>
<h3 id="5、逻辑删除"><a href="#5、逻辑删除" class="headerlink" title="5、逻辑删除"></a>5、逻辑删除</h3><p>​    <strong>（1）简介</strong><br>　　            删除数据，可以通过物理删除，也可以通过逻辑删除。<br>　　            物理删除指的是直接将数据从数据库中删除，不保留。<br>　　            逻辑删除指的是修改数据的某个字段，使其表示为已删除状态，而非删除数据，保留该数据在数据库中，但是查询时不显数据</p>
<p>​                 （查询时过滤掉该数据）。</p>
<p>　　            给数据表增加一个字段：delete_flag，用于表示该数据是否被逻辑删除。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_mybatis_plus_user</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    create_time <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;最后修改时间&#x27;</span>, </span><br><span class="line">    delete_flag <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;逻辑删除（0 未删除、1 删除）&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>   <strong>（2）使用逻辑删除。</strong><br>　　           可以定义一个自动填充规则，初始值为 0。0 表示未删除， 1 表示删除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑删除（0 未删除、1 删除）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer deleteFlag;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;deleteFlag&quot;</span>, Integer.class, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus19.png" alt="mybatis-plus19"></p>
<p>​    <strong>（3）简单测试</strong><br>　　            使用 mybatis-plus 封装好的方法时，会自动添加逻辑删除的功能。<br>　　            若是自定义的 sql 语句，需要手动添加逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (userService.removeById(<span class="number">1258924257048547329L</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除数据成功&quot;</span>);</span><br><span class="line">        userService.list().forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除数据失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现有数据 </p>
<p><img src="/img%5Cmybatis-plus20.png" alt="mybatis-plus20"></p>
<p>执行 testDelete 进行逻辑删除。</p>
<p><img src="/img%5Cmybatis-plus21.png" alt="mybatis-plus21"></p>
<p><img src="/img%5Cmybatis-plus22.png" alt="mybatis-plus22"></p>
<p><font color="red">若去除 TableLogic 注解，再执行 testDelete 时进行物理删除，直接删除这条数据。</font></p>
<p><img src="/img%5Cmybatis-plus23.png" alt="mybatis-plus23"></p>
<p><img src="/img%5Cmybatis-plus24.png" alt="mybatis-plus24"></p>
<h3 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h3><p>​    <strong>（1）简介</strong><br>　　            与 mybatis 的插件 pagehelper 用法类似。<br>　　            通过简单的配置即可使用。</p>
<p>​    <strong>（2）使用</strong><br>​                    Step1：<br>　　                        配置分页插件。<br>　　                        编写一个 配置类，内部使用 @Bean 注解将 PaginationInterceptor 交给 Spring 容器管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyh.test.test_mybatis_plus.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个配置类，mapper 扫描也可在此写上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.lyh.test.test_mybatis_plus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myconfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页插件的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus25.png" alt="mybatis-plus25"></p>
<p>​                Step2：<br>　　                    编写分页代码。<br>　　                    直接 new 一个 Page 对象，对象需要传递两个参数（当前页，每页显示的条数）。<br>　　                    调用 mybatis-plus 提供的分页查询方法，其会将 分页查询的数据封装到 Page 对象中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Step1：创建一个 Page 对象</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;();</span><br><span class="line">    <span class="comment">// Page&lt;User&gt; page = new Page&lt;&gt;(2, 5);</span></span><br><span class="line">    <span class="comment">// Step2：调用 mybatis-plus 提供的分页查询方法</span></span><br><span class="line">    userService.page(page, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// Step3：获取分页数据</span></span><br><span class="line">    System.out.println(page.getCurrent()); <span class="comment">// 获取当前页</span></span><br><span class="line">    System.out.println(page.getTotal()); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(page.getSize()); <span class="comment">// 获取每页的条数</span></span><br><span class="line">    System.out.println(page.getRecords()); <span class="comment">// 获取每页数据的集合</span></span><br><span class="line">    System.out.println(page.getPages()); <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(page.hasNext()); <span class="comment">// 是否存在下一页</span></span><br><span class="line">    System.out.println(page.hasPrevious()); <span class="comment">// 是否存在上一页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus26.png" alt="mybatis-plus26"></p>
<h3 id="7、乐观锁的实现"><a href="#7、乐观锁的实现" class="headerlink" title="7、乐观锁的实现"></a>7、乐观锁的实现</h3><p><strong>（1）首先认识一下 读问题、写问题？</strong></p>
<p>　　    操作数据库数据时，遇到的最基本问题就是 读问题与写问题。<br>　　    读问题 指的是从数据库中读取数据时遇到的问题，比如：脏读、幻读、不可重复读。</p>
<p>​    【脏读、幻读、不可重复读   参考地址：】</p>
<p>​                <a href="https://www.cnblogs.com/l-y-h/p/12458777.html#_label0_3">https://www.cnblogs.com/l-y-h/p/12458777.html#_label0_3</a></p>
<p>​                　写问题 指的是数据写入数据库时遇到的问题，比如：丢失更新（多个线程同时对某条数据更新，无论执行顺序如何，都会丢失其他线程更新的数据）</p>
<p><strong>（2）如何解决写问题？</strong></p>
<p>　　乐观锁、悲观锁就是为了解决 写问题而存在的。<br>　　　　乐观锁：总是假设最好的情况，每次读取数据时认为数据不会被修改（即不加锁），当进行更新操作时，会判断这条数据是否被修改，未被修改，则进行更新操作。若被修改，则数据更新失败，可以对数据进行重试（重新尝试修改数据）。<br>　　　　悲观锁：总是假设最坏的情况，每次读取数据时认为数据会被修改（即加锁），当进行更新操作时，直接更新数据，结束操作后释放锁（此处才可以被其他线程读取）。</p>
<p><strong>（3）乐观锁、悲观锁使用场景？</strong></p>
<p>　　乐观锁一般用于读比较多的场合，尽量减少加锁的开销。<br>　　悲观锁一般用于写比较多的场合，尽量减少 类似 乐观锁重试更新引起的性能开销。</p>
<p><strong>（4）乐观锁两种实现方式</strong></p>
<ul>
<li><p>方式一：通过版本号机制实现。<br>　　在数据表中增加一个 version 字段。<br>  　　取数据时，获取该字段，更新时以该字段为条件进行处理（即set version = newVersion where version = oldVersion），若 version 相同，则更新成功（给新 version 赋一个值，一般加 1）。若 version 不同，则更新失败，可以重新尝试更新操作。</p>
</li>
<li><p>方式二：通过 CAS 算法实现。<br>　　CAS 为 Compare And Swap 的缩写，即比较交换，是一种无锁算法（即在不加锁的情况实现多线程之间的变量同步）。<br>  　　CAS 操作包含三个操作数 —— 内存值（V）、预期原值（A）和新值(B)。如果内存地址里面的值 V 和 A 的值是一样的，那么就将内存里面的值更新成B。若 V 与 A 不一致，则不执行任何操作（可以通过自旋操作，不断尝试修改数据直至成功修改）。即 V == A ？ V = B ： V = V。<br>  　　CAS 可能导致 ABA 问题（两次读取数据时值相同，但不确定值是否被修改过），比如两个线程操作同一个变量，线程 A、线程B 初始读取数据均为 A，后来 线程B 将数据修改为 B，然后又修改为 A，此时线程 A 再次读取到的数据依旧是 A，虽然值相同但是中间被修改过，这就是 ABA 问题。可以加一个额外的标志位 C，用于表示数据是否被修改。当标志位 C 与预期标志位相同、且 V == A 时，则更新值 B。</p>
</li>
</ul>
<p><strong>（5）mybatis-plus 实现乐观锁（通过 version 机制）</strong></p>
<p>实现思路：<br>　　Step1：取出记录时，获取当前version<br>　　Step2：更新时，带上这个version<br>　　Step3：执行更新时， set version = newVersion where version = oldVersion<br>　　Step4：如果version不对，就更新失败</p>
<p><strong>（6）mybatis-plus 代码实现乐观锁</strong></p>
<p>Step1：<br>　　配置乐观锁插件。<br>　　编写一个配置类（可以与上例的分页插件共用一个配置类），将 OptimisticLockerInterceptor 通过 @Bean 交给 Spring 管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 乐观锁插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 乐观锁插件的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus27.png" alt="mybatis-plus27"></p>
<p>Step2：<br>　　定义一个数据库字段 version。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_mybatis_plus_user</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    create_time <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;最后修改时间&#x27;</span>, </span><br><span class="line">    delete_flag <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;逻辑删除（0 未删除、1 删除）&#x27;</span>,</span><br><span class="line">    <span class="keyword">version</span> <span class="built_in">int</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;版本号（用于乐观锁， 默认为 1）&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Step3：<br>　　使用 @Version 注解标注对应的实体类。<br>　　可以通过 @TableField 进行数据自动填充。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 版本号（用于乐观锁， 默认为 1）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">&quot;version&quot;</span>, Integer.class, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus28.png" alt="mybatis-plus28"></p>
<p>Step4：<br>　　简单测试一下，可以看一下 控制台 打印的 sql 语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;tom&quot;</span>).setAge(<span class="number">20</span>).setEmail(<span class="string">&quot;tom@163.com&quot;</span>);</span><br><span class="line">    userService.save(user);</span><br><span class="line">    userService.list().forEach(System.out::println);</span><br><span class="line">    user.setName(<span class="string">&quot;jarry&quot;</span>);</span><br><span class="line">    userService.update(user, <span class="keyword">null</span>);</span><br><span class="line">    userService.list().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus29.png" alt="mybatis-plus29"></p>
<h2 id="三、Mybatis-Plus-CRUD-操作简单了解一下"><a href="#三、Mybatis-Plus-CRUD-操作简单了解一下" class="headerlink" title="三、Mybatis-Plus CRUD 操作简单了解一下"></a>三、Mybatis-Plus CRUD 操作简单了解一下</h2><h3 id="1、Mapper-接口方法（CRUD）简单了解一下"><a href="#1、Mapper-接口方法（CRUD）简单了解一下" class="headerlink" title="1、Mapper 接口方法（CRUD）简单了解一下"></a>1、Mapper 接口方法（CRUD）简单了解一下</h3><p><strong>（1）简介</strong><br>　　使用代码生成器生成的 mapper 接口中，其继承了 BaseMapper 接口。<br>　　而 BaseMapper 接口中封装了一系列 CRUD 常用操作，可以直接使用，而不用自定义 xml 与 sql 语句进行 CRUD 操作（当然根据实际开发需要，自定义 sql 还是有必要的）。</p>
<p>此处简单介绍一下 BaseMapper 接口中的常用方法。</p>
<p><img src="/img%5Cmybatis-plus30.png" alt="mybatis-plus30"></p>
<p><img src="/img%5Cmybatis-plus31.png" alt="mybatis-plus31"></p>
<p><strong>（2）方法介绍</strong><br>　　混个眼熟，用多了就记得了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【添加数据：（增）】</span><br><span class="line">    int <span class="keyword">insert</span>(T entity);              // 插入一条记录</span><br><span class="line">注：</span><br><span class="line">    T         表示任意实体类型</span><br><span class="line">    entity    表示实体对象</span><br><span class="line"></span><br><span class="line">【删除数据：（删）】</span><br><span class="line">   int deleteById(Serializable id);    // 根据主键 ID 删除</span><br><span class="line">   int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);  // 根据 map 定义字段的条件删除</span><br><span class="line">   int <span class="keyword">delete</span>(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper); // 根据实体类定义的 条件删除对象</span><br><span class="line">   int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList); // 进行批量删除</span><br><span class="line">注：</span><br><span class="line">    id        表示 主键 ID</span><br><span class="line">    columnMap 表示表字段的 map 对象</span><br><span class="line">    wrapper   表示实体对象封装操作类，可以为 null。</span><br><span class="line">    idList    表示 主键 ID 集合（列表、数组），不能为 null 或 empty</span><br><span class="line"></span><br><span class="line">【修改数据：（改）】</span><br><span class="line">   int updateById(@Param(Constants.ENTITY) T entity); // 根据 ID 修改实体对象。</span><br><span class="line">   int <span class="keyword">update</span>(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper); // 根据 updateWrapper 条件修改实体对象</span><br><span class="line">注：</span><br><span class="line">    <span class="keyword">update</span> 中的 entity 为 <span class="keyword">set</span> 条件，可以为 <span class="literal">null</span>。</span><br><span class="line">    updateWrapper 表示实体对象封装操作类（可以为 <span class="literal">null</span>,里面的 entity 用于生成 <span class="keyword">where</span> 语句）</span><br><span class="line"></span><br><span class="line">【查询数据：（查）】</span><br><span class="line">    T selectById(<span class="keyword">Serializable</span> <span class="keyword">id</span>); // 根据 主键 ID 查询数据</span><br><span class="line">    List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList); // 进行批量查询</span><br><span class="line">    List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap); // 根据表字段条件查询</span><br><span class="line">    T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 根据实体类封装对象 查询一条记录</span><br><span class="line">    Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询记录的总条数</span><br><span class="line">    List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 entity 集合）</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 map 集合）</span><br><span class="line">    List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（但只保存第一个字段的值）</span><br><span class="line">    &lt;E extends IPage&lt;T&gt;&gt; E selectPage(E page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 entity 集合），分页</span><br><span class="line">    &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E selectMapsPage(E page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); // 查询所有记录（返回 map 集合），分页</span><br><span class="line">注：</span><br><span class="line">    queryWrapper 表示实体对象封装操作类（可以为 null）</span><br><span class="line">    page 表示分页查询条件</span><br></pre></td></tr></table></figure>

<h3 id="2、Service-接口方法（CRUD）简单了解一下"><a href="#2、Service-接口方法（CRUD）简单了解一下" class="headerlink" title="2、Service 接口方法（CRUD）简单了解一下"></a>2、Service 接口方法（CRUD）简单了解一下</h3><p><strong>（1）简介</strong><br>　　使用 代码生成器 生成的 service 接口中，其继承了 IService 接口。<br>　　IService 内部进一步封装了 BaseMapper 接口的方法（当然也提供了更详细的方法）。<br>　　使用时，可以通过 生成的 mapper 类进行 CRUD 操作，也可以通过 生成的 service 的实现类进行 CRUD 操作。（当然，自定义代码执行也可）<br>此处简单介绍一下 IService 中封装的常用方法。</p>
<p><img src="/img%5Cmybatis-plus32.png" alt="mybatis-plus32"></p>
<p><img src="/img%5Cmybatis-plus33.png" alt="mybatis-plus33"></p>
<p><strong>（2）方法介绍</strong><br>　　混个眼熟，用多了就记得了。<br>　　内部封装了 BaseMapper 的方法，也提供了新的方法。<br>比如：<br>　　添加了 批量更新 方法、更新或修改方法等。<br>　　对 查询方法 做了细化，使用 get 命名的方法查询一条数据，使用 list 命名的方法查询多条数据等。<br>　　增加了链式调用的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">【添加数据：（增）】</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T entity)</span></span>; <span class="comment">// 调用 BaseMapper 的 insert 方法，用于添加一条数据。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>; <span class="comment">// 批量插入数据</span></span><br><span class="line">注：</span><br><span class="line">    entityList 表示实体对象集合 </span><br><span class="line">    batchSize 表示一次批量插入的数据量，默认为 <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">【添加或修改数据：（增或改）】</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span></span>; <span class="comment">// id 若存在，则修改， id 不存在则新增数据</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>; <span class="comment">// 先根据条件尝试更新，然后再执行 saveOrUpdate 操作</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>; <span class="comment">// 批量插入并修改数据 </span></span><br><span class="line"></span><br><span class="line">【删除数据：（删）】</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span></span>; <span class="comment">// 调用 BaseMapper 的 deleteById 方法，根据 id 删除数据。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>; <span class="comment">// 调用 BaseMapper 的 deleteByMap 方法，根据 map 定义字段的条件删除</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>; <span class="comment">// 调用 BaseMapper 的 delete 方法，根据实体类定义的 条件删除对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>; <span class="comment">// 用 BaseMapper 的 deleteBatchIds 方法, 进行批量删除。</span></span><br><span class="line">    </span><br><span class="line">【修改数据：（改）】</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(T entity)</span></span>; <span class="comment">// 调用 BaseMapper 的 updateById 方法，根据 ID 选择修改。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>; <span class="comment">// 调用 BaseMapper 的 update 方法，根据 updateWrapper 条件修改实体对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>; <span class="comment">// 批量更新数据</span></span><br><span class="line"></span><br><span class="line">【查找数据：（查）】</span><br><span class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">getById</span><span class="params">(Serializable id)</span></span>; <span class="comment">// 调用 BaseMapper 的 selectById 方法，根据 主键 ID 返回数据。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;T&gt; <span class="title">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>; <span class="comment">// 调用 BaseMapper 的 selectBatchIds 方法，批量查询数据。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;T&gt; <span class="title">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>; <span class="comment">// 调用 BaseMapper 的 selectByMap 方法，根据表字段条件查询</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>; <span class="comment">// 返回一条记录（实体类保存）。</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>; <span class="comment">// 返回一条记录（map 保存）。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>; <span class="comment">// 根据条件返回 记录数。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;T&gt; <span class="title">list</span><span class="params">()</span></span>; <span class="comment">// 返回所有数据。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;T&gt; <span class="title">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>; <span class="comment">// 调用 BaseMapper 的 selectList 方法，查询所有记录（返回 entity 集合）。</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper); <span class="comment">// 调用 BaseMapper 的 selectMaps 方法，查询所有记录（返回 map 集合）。</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;Object&gt; <span class="title">listObjs</span><span class="params">()</span></span>; <span class="comment">// 返回全部记录，但只返回第一个字段的值。</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E extends IPage&lt;T&gt;&gt; <span class="function">E <span class="title">page</span><span class="params">(E page, Wrapper&lt;T&gt; queryWrapper)</span></span>; <span class="comment">// 调用 BaseMapper 的 selectPage 方法，分页查询</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; <span class="function">E <span class="title">pageMaps</span><span class="params">(E page, Wrapper&lt;T&gt; queryWrapper)</span></span>; <span class="comment">// 调用 BaseMapper 的 selectMapsPage 方法，分页查询</span></span><br><span class="line">注：</span><br><span class="line">    get 用于返回一条记录。</span><br><span class="line">    list 用于返回多条记录。</span><br><span class="line">    count 用于返回记录总数。</span><br><span class="line">    page 用于分页查询。</span><br><span class="line">    </span><br><span class="line">【链式调用：】</span><br><span class="line">    <span class="function"><span class="keyword">default</span> QueryChainWrapper&lt;T&gt; <span class="title">query</span><span class="params">()</span></span>; <span class="comment">// 普通链式查询</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> LambdaQueryChainWrapper&lt;T&gt; <span class="title">lambdaQuery</span><span class="params">()</span></span>; <span class="comment">// 支持 Lambda 表达式的修改</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> UpdateChainWrapper&lt;T&gt; <span class="title">update</span><span class="params">()</span></span>; <span class="comment">// 普通链式修改</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> LambdaUpdateChainWrapper&lt;T&gt; <span class="title">lambdaUpdate</span><span class="params">()</span></span>; <span class="comment">// 支持 Lambda 表达式的修改</span></span><br><span class="line">注：</span><br><span class="line">    query 表示查询</span><br><span class="line">    update 表示修改</span><br><span class="line">    Lambda 表示内部支持 Lambda 写法。</span><br><span class="line">形如：</span><br><span class="line">    query().eq(<span class="string">&quot;column&quot;</span>, value).one();</span><br><span class="line">    lambdaQuery().eq(Entity::getId, value).list();</span><br><span class="line">    update().eq(<span class="string">&quot;column&quot;</span>, value).remove();</span><br><span class="line">    lambdaUpdate().eq(Entity::getId, value).update(entity);</span><br></pre></td></tr></table></figure>

<h3 id="3、条件构造器（Wrapper，定义-where-条件）"><a href="#3、条件构造器（Wrapper，定义-where-条件）" class="headerlink" title="3、条件构造器（Wrapper，定义 where 条件）"></a>3、条件构造器（Wrapper，定义 where 条件）</h3><p><strong>（1）简介</strong><br>　　上面介绍的 接口方法的参数中，会出现各种 wrapper，比如 queryWrapper、updateWrapper 等。wrapper 的作用就是用于定义各种各样的查询条件（where）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Wrapper  条件构造抽象类</span><br><span class="line">    <span class="comment">-- AbstractWrapper 查询条件封装，用于生成 sql 中的 where 语句。</span></span><br><span class="line">        <span class="comment">-- QueryWrapper Entity 对象封装操作类，用于查询。</span></span><br><span class="line">        <span class="comment">-- UpdateWrapper Update 条件封装操作类，用于更新。</span></span><br><span class="line">    <span class="comment">-- AbstractLambdaWrapper 使用 Lambda 表达式封装 wrapper</span></span><br><span class="line">        <span class="comment">-- LambdaQueryWrapper 使用 Lambda 语法封装条件，用于查询。</span></span><br><span class="line">        <span class="comment">-- LambdaUpdateWrapper 使用 Lambda 语法封装条件，用于更新。</span></span><br></pre></td></tr></table></figure>

<p><img src="/img%5Cmybatis-plus34.png" alt="mybatis-plus34"></p>
<p><strong>（2）常用条件</strong><br>　　参考源码以及官方文档总结的，还是一句话，混个眼熟，多用用就熟练了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【通用条件：】</span><br><span class="line">【比较大小： ( =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;= )】</span><br><span class="line">    eq(R column, Object val); // 等价于 =，例: eq(&quot;name&quot;, &quot;老王&quot;) <span class="comment">---&gt; name = &#x27;老王&#x27;</span></span><br><span class="line">    ne(R column, Object val); // 等价于 &lt;&gt;，例: ne(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt;&gt; &#x27;老王&#x27;</span><br><span class="line">    gt(R column, Object val); // 等价于 &gt;，例: gt(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &gt; &#x27;老王&#x27;</span><br><span class="line">    ge(R column, Object val); // 等价于 &gt;=，例: ge(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &gt;= &#x27;老王&#x27;</span><br><span class="line">    lt(R column, Object val); // 等价于 &lt;，例: lt(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt; &#x27;老王&#x27;</span><br><span class="line">    le(R column, Object val); // 等价于 &lt;=，例: le(&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt;= &#x27;老王&#x27;</span><br><span class="line">    </span><br><span class="line">【范围：（between、not between、in、not in）】</span><br><span class="line">   between(R column, Object val1, Object val2); // 等价于 between a and b, 例： between(&quot;age&quot;, 18, 30) <span class="comment">---&gt; age between 18 and 30</span></span><br><span class="line">   notBetween(R column, Object val1, Object val2); // 等价于 not between a and b, 例： notBetween(&quot;age&quot;, 18, 30) <span class="comment">---&gt; age not between 18 and 30</span></span><br><span class="line">   in(R column, Object... values); // 等价于 字段 IN (v0, v1, ...),例: in(&quot;age&quot;,&#123;1,2,3&#125;) ---&gt; age in (1,2,3)</span><br><span class="line">   notIn(R column, Object... values); // 等价于 字段 NOT IN (v0, v1, ...), 例: notIn(&quot;age&quot;,&#123;1,2,3&#125;) ---&gt; age not in (1,2,3)</span><br><span class="line">   inSql(R column, Object... <span class="keyword">values</span>); // 等价于 字段 IN (sql 语句), 例: inSql(&quot;id&quot;, &quot;<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">3</span><span class="string">&quot;) ---&gt; id in (select id from table where id &lt; 3)</span></span><br><span class="line"><span class="string">   notInSql(R column, Object... values); // 等价于 字段 NOT IN (sql 语句)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">【模糊匹配：（like）】</span></span><br><span class="line"><span class="string">    like(R column, Object val); // 等价于 LIKE &#x27;%值%&#x27;，例: like(&quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>王<span class="string">&quot;) ---&gt; name like &#x27;%王%&#x27;</span></span><br><span class="line"><span class="string">    notLike(R column, Object val); // 等价于 NOT LIKE &#x27;%值%&#x27;，例: notLike(&quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>王<span class="string">&quot;) ---&gt; name not like &#x27;%王%&#x27;</span></span><br><span class="line"><span class="string">    likeLeft(R column, Object val); // 等价于 LIKE &#x27;%值&#x27;，例: likeLeft(&quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>王<span class="string">&quot;) ---&gt; name like &#x27;%王&#x27;</span></span><br><span class="line"><span class="string">    likeRight(R column, Object val); // 等价于 LIKE &#x27;值%&#x27;，例: likeRight(&quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>王<span class="string">&quot;) ---&gt; name like &#x27;王%&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">【空值比较：（isNull、isNotNull）】</span></span><br><span class="line"><span class="string">    isNull(R column); // 等价于 IS NULL，例: isNull(&quot;</span><span class="keyword">name</span><span class="string">&quot;) ---&gt; name is null</span></span><br><span class="line"><span class="string">    isNotNull(R column); // 等价于 IS NOT NULL，例: isNotNull(&quot;</span><span class="keyword">name</span><span class="string">&quot;) ---&gt; name is not null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">【分组、排序：（group、having、order）】</span></span><br><span class="line"><span class="string">    groupBy(R... columns); // 等价于 GROUP BY 字段, ...， 例: groupBy(&quot;</span><span class="keyword">id</span><span class="string">&quot;, &quot;</span><span class="keyword">name</span><span class="string">&quot;) ---&gt; group by id,name</span></span><br><span class="line"><span class="string">    orderByAsc(R... columns); // 等价于 ORDER BY 字段, ... ASC， 例: orderByAsc(&quot;</span><span class="keyword">id</span><span class="string">&quot;, &quot;</span><span class="keyword">name</span><span class="string">&quot;) ---&gt; order by id ASC,name ASC</span></span><br><span class="line"><span class="string">    orderByDesc(R... columns); // 等价于 ORDER BY 字段, ... DESC， 例: orderByDesc(&quot;</span><span class="keyword">id</span><span class="string">&quot;, &quot;</span><span class="keyword">name</span><span class="string">&quot;) ---&gt; order by id DESC,name DESC</span></span><br><span class="line"><span class="string">    having(String sqlHaving, Object... params); // 等价于 HAVING ( sql语句 )， 例: having(&quot;</span><span class="keyword">sum</span>(age) &gt; &#123;<span class="number">0</span>&#125;<span class="string">&quot;, 11) ---&gt; having sum(age) &gt; 11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">【拼接、嵌套 sql：（or、and、nested、apply）】</span></span><br><span class="line"><span class="string">   or(); // 等价于 a or b， 例：eq(&quot;</span><span class="keyword">id</span><span class="string">&quot;,1).or().eq(&quot;</span><span class="keyword">name</span><span class="string">&quot;,&quot;</span>老王<span class="string">&quot;) ---&gt; id = 1 or name = &#x27;老王&#x27;</span></span><br><span class="line"><span class="string">   or(Consumer&lt;Param&gt; consumer); // 等价于 or(a or/and b)，or 嵌套。例: or(i -&gt; i.eq(&quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>李白<span class="string">&quot;).ne(&quot;</span><span class="keyword">status</span><span class="string">&quot;, &quot;</span>活着<span class="string">&quot;)) ---&gt; or (name = &#x27;李白&#x27; and status &lt;&gt; &#x27;活着&#x27;)</span></span><br><span class="line"><span class="string">   and(Consumer&lt;Param&gt; consumer); // 等价于 and(a or/and b)，and 嵌套。例: and(i -&gt; i.eq(&quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>李白<span class="string">&quot;).ne(&quot;</span><span class="keyword">status</span><span class="string">&quot;, &quot;</span>活着<span class="string">&quot;)) ---&gt; and (name = &#x27;李白&#x27; and status &lt;&gt; &#x27;活着&#x27;)</span></span><br><span class="line"><span class="string">   nested(Consumer&lt;Param&gt; consumer); // 等价于 (a or/and b)，普通嵌套。例: nested(i -&gt; i.eq(&quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>李白<span class="string">&quot;).ne(&quot;</span><span class="keyword">status</span><span class="string">&quot;, &quot;</span>活着<span class="string">&quot;)) ---&gt; (name = &#x27;李白&#x27; and status &lt;&gt; &#x27;活着&#x27;)</span></span><br><span class="line"><span class="string">   apply(String applySql, Object... params); // 拼接sql（若不使用 params 参数，可能存在 sql 注入），例: apply(&quot;</span><span class="keyword">date_format</span>(dateColumn,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) = &#123;<span class="number">0</span>&#125;<span class="string">&quot;, &quot;</span><span class="number">2008</span><span class="number">-08</span><span class="number">-08</span><span class="string">&quot;) ---&gt; date_format(dateColumn,&#x27;%Y-%m-%d&#x27;) = &#x27;2008-08-08&#x27;&quot;</span>)</span><br><span class="line">   <span class="keyword">last</span>(<span class="keyword">String</span> lastSql); // 无视优化规则直接拼接到 sql 的最后，可能存若在 sql 注入。</span><br><span class="line">   exists(String existsSql); // 拼接 exists 语句。例: exists(&quot;<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> age = <span class="number">1</span><span class="string">&quot;) ---&gt; exists (select id from table where age = 1)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">【QueryWrapper 条件：】</span></span><br><span class="line"><span class="string">    select(String... sqlSelect); // 用于定义需要返回的字段。例： select(&quot;</span><span class="keyword">id</span><span class="string">&quot;, &quot;</span><span class="keyword">name</span><span class="string">&quot;, &quot;</span>age<span class="string">&quot;) ---&gt; select id, name, age</span></span><br><span class="line"><span class="string">    select(Predicate&lt;TableFieldInfo&gt; predicate); // Lambda 表达式，过滤需要的字段。</span></span><br><span class="line"><span class="string">    lambda(); // 返回一个 LambdaQueryWrapper</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">【UpdateWrapper 条件：】</span></span><br><span class="line"><span class="string">    set(String column, Object val); // 用于设置 set 字段值。例: set(&quot;</span><span class="keyword">name</span><span class="string">&quot;, null) ---&gt; set name = null</span></span><br><span class="line"><span class="string">    etSql(String sql); // 用于设置 set 字段值。例: setSql(&quot;</span><span class="keyword">name</span> = <span class="string">&#x27;老李头&#x27;</span><span class="string">&quot;) ---&gt; set name = &#x27;老李头&#x27;</span></span><br><span class="line"><span class="string">    lambda(); // 返回一个 LambdaUpdateWrapper</span></span><br></pre></td></tr></table></figure>

<p><strong>（3）简单使用，测试一下 QueryWrapper</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryWrapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Step1：创建一个 QueryWrapper 对象</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step2： 构造查询条件</span></span><br><span class="line">    queryWrapper</span><br><span class="line">            .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">            .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;j&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step3：执行查询</span></span><br><span class="line">    userService</span><br><span class="line">            .list(queryWrapper)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当前数据库数据如下：</p>
<p><img src="/img%5Cmybatis-plus35.png" alt="mybatis-plus35"></p>
<p>执行测试方法输出如下：</p>
<p><img src="/img%5Cmybatis-plus36.png" alt="mybatis-plus36"></p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
            <category> MyBatis-Plus </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swagger的使用]]></title>
      <url>/2020/12/16/Swagger%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1、描述"><a href="#1、描述" class="headerlink" title="1、描述"></a>1、描述</h2><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>
<p>作用： </p>
<h4 id="1-接口的文档在线自动生成"><a href="#1-接口的文档在线自动生成" class="headerlink" title="1.接口的文档在线自动生成"></a>1.接口的文档在线自动生成</h4><h4 id="2-功能测试"><a href="#2-功能测试" class="headerlink" title="2.功能测试"></a>2.功能测试</h4><h2 id="2、运用"><a href="#2、运用" class="headerlink" title="2、运用"></a>2、运用</h2><p><strong>(a)maven导入Swagger</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>(b) 创建Swagger2配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: jpademo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Swagger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ZengGuangfu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-10-24 10:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">         .apiInfo(apiInfo())</span><br><span class="line">         .select()</span><br><span class="line">         .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.springbootjpa.jpademo.controller&quot;</span>))</span><br><span class="line">         .paths(PathSelectors.any())</span><br><span class="line">         .build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">         .title(<span class="string">&quot;利用swagger2构建的API文档&quot;</span>)</span><br><span class="line">         .description(<span class="string">&quot;用restful风格写接口&quot;</span>)</span><br><span class="line">         .termsOfServiceUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">         .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">         .build();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，docket() 方法创建Docket的Bean对象，apiInfo()则是创建ApiInfo的基本信息。</p>
<h2 id="3、注解及其说明"><a href="#3、注解及其说明" class="headerlink" title="3、注解及其说明"></a>3、注解及其说明</h2><p>@Api : 用在类上，说明该类的主要作用。</p>
<p>@ApiOperation：用在方法上，给API增加方法说明。</p>
<p>@ApiImplicitParams : 用在方法上，包含一组参数说明。</p>
<p>@ApiImplicitParam：用来注解来给方法入参增加说明。</p>
<p><img src="https://admin768528.github.io/admin768528/raw/blob/main/img/swagger/swagger1.png" alt="swagger1"></p>
<p>@ApiResponses：用于表示一组响应。</p>
<p>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息</p>
<p> l <strong>code</strong>：数字，例如400</p>
<p> l <strong>message</strong>：信息，例如”请求参数没填好”</p>
<p> l <strong>response</strong>：抛出异常的类</p>
<p>@ApiModel：用在返回对象类上，描述一个Model的信息（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）</p>
<p> l <strong>@ApiModelProperty</strong>：描述一个model的属性</p>
<p><strong>以下仅仅是一个例子，其实我个人在开发中很少使用@ApiImplicitParam 作为参数的描述，这样描述在参数过多的条件下会有点麻烦。个人一般是将参数封装为一个完整对象（特别是GET方法），并利用@ApiModel注解去定义参数，如果不需要作为查询条件的，则加一个hidden = true，如果是必填属性，则增加一个required = true即可。</strong></p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: jpademo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: EmployeeController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ZengGuangfu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-10-23 11:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;emp&quot;)</span></span><br><span class="line"><span class="meta">@Api(value = &quot;用户管理类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> EmployeeReposiroty employeeReposiroty;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 增加人物</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@PostMapping(value = &quot;employee&quot;)</span></span><br><span class="line">     <span class="meta">@ApiOperation(value = &quot;新增一个用户&quot;,notes = &quot;新增之后返回对象&quot;)</span></span><br><span class="line">     <span class="meta">@ApiImplicitParam(paramType = &quot;query&quot;,name = &quot;employee&quot;,value = &quot;用户&quot;,required = true)</span></span><br><span class="line">     <span class="meta">@ApiResponse(code = 400,message = &quot;参数没有填好&quot;,response = String.class)</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">         Employee employee1 = employeeReposiroty.save(employee);</span><br><span class="line">         <span class="keyword">if</span>(employee1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> SysNode.Judge.SUCCESS.getResult();</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> SysNode.Judge.FAILD.getResult();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 删除单个用户</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@DeleteMapping(value = &quot;employee/&#123;id&#125;&quot;)</span></span><br><span class="line">      <span class="meta">@ApiOperation(value = &quot;删除用户&quot;,notes = &quot;根据成员id删除单个用户&quot;)</span></span><br><span class="line">      <span class="meta">@ApiImplicitParam(paramType = &quot;path&quot;,name = &quot;id&quot;,value = &quot;用户id&quot;,required = true,dataType = &quot;Integer&quot;)</span></span><br><span class="line">      <span class="meta">@ApiResponse(code = 400,message = &quot;参数没有填好&quot;,response = String.class)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">                employeeReposiroty.deleteById(id);</span><br><span class="line">                <span class="keyword">return</span> SysNode.Judge.SUCCESS.getResult();</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">               <span class="keyword">return</span> SysNode.Judge.FAILD.getResult();</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 修改单个成员</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@PutMapping(value = &quot;employee/&#123;id&#125;&quot;)</span></span><br><span class="line">      <span class="meta">@ApiOperation(value = &quot;修改用户信息&quot;,notes = &quot;根据成员id修改单个用户&quot;)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * save方法如果参数属性缺失，会导致原本存在的数据为null</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">           Employee employee1 = employeeReposiroty.saveAndFlush(employee);</span><br><span class="line">           <span class="keyword">if</span> (employee1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> SysNode.Judge.SUCCESS.getResult();</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> SysNode.Judge.FAILD.getResult();</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 获取所有成员,升序排列</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@GetMapping(value = &quot;employee/sort&quot;)</span></span><br><span class="line">      <span class="meta">@ApiOperation(value = &quot;查询全部用户&quot;,notes = &quot;默认根据升序查询全部用户信息&quot;)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">           Sort orders = <span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">&quot;employeeId&quot;</span>);</span><br><span class="line">           List&lt;Employee&gt; employeeList = employeeReposiroty.findAll(orders);</span><br><span class="line">           <span class="keyword">return</span> employeeList;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有成员,升序排列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="meta">@GetMapping(value = &quot;employee/pageSort&quot;)</span></span><br><span class="line">      <span class="meta">@ApiOperation(value = &quot;查询用户信息&quot;,notes = &quot;查询用户信息&quot;)</span></span><br><span class="line">      <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">           @ApiImplicitParam(paramType = &quot;query&quot;,name = &quot;sort&quot;,value = &quot;排序方式:asc|desc&quot;,dataType = &quot;String&quot;,required = true),</span></span><br><span class="line"><span class="meta">           @ApiImplicitParam(paramType = &quot;query&quot;,name = &quot;pagenumber&quot;,value = &quot;第几页&quot;,dataType = &quot;Integer&quot;,required = true),</span></span><br><span class="line"><span class="meta">           @ApiImplicitParam(paramType = &quot;query&quot;,name = &quot;pageSize&quot;,value = &quot;分页数&quot;,dataType = &quot;Integer&quot;,required = true)</span></span><br><span class="line"><span class="meta">      &#125;)</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">findAllByPage</span><span class="params">(String sort,Integer pagenumber,Integer pageSize)</span></span>&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">                Sort.Direction sortlast;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;desc&quot;</span>.equals(sort.toLowerCase()))&#123;</span><br><span class="line">                     sortlast = Sort.Direction.DESC;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;          </span><br><span class="line">                      sortlast = Sort.Direction.ASC;</span><br><span class="line">               &#125;</span><br><span class="line">                     Sort orders = <span class="keyword">new</span> Sort(sortlast, <span class="string">&quot;employeeId&quot;</span>);</span><br><span class="line">                     Pageable pageable = <span class="keyword">new</span> PageRequest(pagenumber, pageSize, orders);</span><br><span class="line">                     Page&lt;Employee&gt; employeePage = employeeReposiroty.findAll(pageable);</span><br><span class="line">                     List&lt;Employee&gt; employeeList = employeePage.getContent();</span><br><span class="line">                     <span class="keyword">return</span> employeeList;</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义拓展jpa，根据用户名查找单个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="meta">@GetMapping(value = &quot;employee/find/&#123;username&#125;&quot;)</span></span><br><span class="line">     <span class="meta">@ApiOperation(value = &quot;查询用户信息&quot;,notes = &quot;根据用户登录名查询该用户信息&quot;)</span></span><br><span class="line">     <span class="meta">@ApiImplicitParam(paramType = &quot;path&quot;,name = &quot;username&quot;,value = &quot;用户登录名&quot;,required = true,dataType = &quot;String&quot;)</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Employee <span class="title">findByUsername</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">         List&lt;Employee&gt; employeeList = employeeReposiroty.findByUserNameOrderByEmployeeIdAsc(username);</span><br><span class="line">         <span class="keyword">if</span> (employeeList != <span class="keyword">null</span> &amp;&amp; !employeeList.isEmpty())&#123;</span><br><span class="line">             <span class="keyword">return</span> employeeList.get(<span class="number">0</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="meta">@GetMapping(value = &quot;employee/grade&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> List&lt;Object[]&gt; findEmployeeAndGrade()&#123;</span><br><span class="line">         Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">         Page&lt;Object[]&gt; page = employeeReposiroty.findEmployeeAndGrade(pageable);</span><br><span class="line">         System.out.println(page.getTotalElements()+<span class="string">&quot;----------结果总数------------&quot;</span>);</span><br><span class="line">         System.out.println(page.getTotalPages()+<span class="string">&quot;--------根据pageSize的总页数-----------&quot;</span>);</span><br><span class="line">         System.out.println(page.getNumber()+<span class="string">&quot;--------当前页数，pageNumber----------&quot;</span>);</span><br><span class="line">         System.out.println(page.getNumberOfElements()+<span class="string">&quot;--------当前页有几个数据--------&quot;</span>);</span><br><span class="line">         System.out.println(page.getSize()+<span class="string">&quot;---------PageSize-------------&quot;</span>);</span><br><span class="line">         System.out.println(page.getSort()+<span class="string">&quot;---------排序方式，没有则是&#x27;UNSORTED&#x27;----------&quot;</span>);</span><br><span class="line">         List&lt;Object[]&gt; objects = page.getContent();</span><br><span class="line">         <span class="keyword">return</span> objects;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、测试登录-localhost-8080-swagger-ui-html"><a href="#4、测试登录-localhost-8080-swagger-ui-html" class="headerlink" title="4、测试登录 localhost:8080/swagger-ui.html)"></a>4、测试登录 localhost:8080/swagger-ui.html)</h2><p>​    <img src="/./img/swagger/swagger2.png" alt="swagger-ui"></p>
<p>API 操作测试，修改</p>
<p><img src="/.%5Cimg%5Cswagger%5Cswagger3.png" alt="testParam"></p>
<p><img src="/.%5Cimg%5Cswagger%5Cswagger4.png" alt="testResult"></p>
<h2 id="5、-ApiModel-接收对象传参"><a href="#5、-ApiModel-接收对象传参" class="headerlink" title="5、@ApiModel 接收对象传参"></a>5、@ApiModel 接收对象传参</h2><p>注意：<font color="red"> 在后台采用对象接收参数时，Swagger自带的工具采用的是JSON传参， 测试时需要在参数上加入@RequestBody,正常运行采用form或URL提交时候请删除。</font></p>
<p><strong>例子：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: jpademo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ZengGuangfu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018-10-23 10:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;用户对象模型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer employeeId;</span><br><span class="line">   <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;,required = true)</span></span><br><span class="line">   <span class="keyword">private</span> String userName;</span><br><span class="line">   <span class="meta">@ApiModelProperty(value = &quot;年龄&quot;,required = true)</span></span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="meta">@ApiModelProperty(value = &quot;年级&quot;,required = true)</span></span><br><span class="line">   <span class="keyword">private</span> Integer graId;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Audit</span></span>&#123;&#125;;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Children</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
            <category> Swagger </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2020/12/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
